#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'newrelic_plugin'
require 'open-uri'
require 'json'

module NewRelic::Elasticsearch
  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid 'com.secondimpression.newrelic-elasticsearch-agent'
    agent_version '1.1.0'
    agent_config_options :name, :url, :index, :username, :password
    agent_human_labels('ElasticSearch') { name }

    def setup_metrics
      @created_rate = NewRelic::Processor::EpochCounter.new
      @deleted_rate = NewRelic::Processor::EpochCounter.new

      @store_time = NewRelic::Processor::EpochCounter.new
      @store_rate = NewRelic::Processor::EpochCounter.new

      @index_time  = NewRelic::Processor::EpochCounter.new
      @index_rate  = NewRelic::Processor::EpochCounter.new
      @delete_time = NewRelic::Processor::EpochCounter.new
      @delete_rate = NewRelic::Processor::EpochCounter.new

      @get_time     = NewRelic::Processor::EpochCounter.new
      @get_rate     = NewRelic::Processor::EpochCounter.new
      @exists_time  = NewRelic::Processor::EpochCounter.new
      @exists_rate  = NewRelic::Processor::EpochCounter.new
      @missing_time = NewRelic::Processor::EpochCounter.new
      @missing_rate = NewRelic::Processor::EpochCounter.new

      @query_time = NewRelic::Processor::EpochCounter.new
      @query_rate = NewRelic::Processor::EpochCounter.new
      @fetch_time = NewRelic::Processor::EpochCounter.new
      @fetch_rate = NewRelic::Processor::EpochCounter.new

      @refresh_time = NewRelic::Processor::EpochCounter.new
      @refresh_rate = NewRelic::Processor::EpochCounter.new

      @flush_time = NewRelic::Processor::EpochCounter.new
      @flush_rate = NewRelic::Processor::EpochCounter.new
    end

    def poll_cycle
      index_stats = JSON.parse( get_index_stats ) if get_index_stats
      if index_stats
        if index == '_all'
          index_stats = index_stats['_all']['total'] if index_stats['_all']
        else
          index_stats = index_stats['indices']["#{index}"]['total'] if index_stats['indices']["#{index}"]
        end

        report_index(index_stats) if index_stats
      end
    end

    private

    def report_index stats
      if stats['docs']
        report_metric 'Documented/Total', 'Documents', stats['docs']['count'] || 0

        report_metric 'Created/Rate', 'Documents/sec', @created_rate.process( stats['docs']['count'] || 0 )
        report_metric 'Deleted/Rate', 'Documents/sec', @deleted_rate.process( stats['docs']['deleted'] || 0 )
      end

      if stats['store']
        report_metric 'Store/Total', 'Bytes',        stats['store']['size_in_bytes'] || 0
        report_metric 'Store/Time',  'Milliseconds', @store_time.process( stats['store']['size_in_bytes'] || 0 )
        report_metric 'Store/Rate',  'Bytes/sec',    @store_rate.process( stats['store']['throttle_time_in_millis'] || 0 )
      end

      if stats['indexing']
        report_metric 'Index/Index/Time', 'Milliseconds', @index_time.process( stats['indexing']['index_time_in_millis'] || 0 )
        report_metric 'Index/Index/Rate', 'Queries/sec',  @index_rate.process( stats['indexing']['index_total'] || 0 )

        report_metric 'Index/Delete/Time', 'Milliseconds', @delete_time.process( stats['indexing']['delete_time_in_millis'] || 0 )
        report_metric 'Index/Delete/Rate', 'Queries/sec',  @delete_rate.process( stats['indexing']['delete_total'] || 0 )
      end

      if stats['get']
        report_metric 'Index/Get/Time', 'Milliseconds', @get_time.process( stats['get']['time_in_millis'] || 0 )
        report_metric 'Index/Get/Rate', 'Queries/sec',  @get_rate.process( stats['get']['total'] ) || 0

        report_metric 'Index/Exists/Time', 'Milliseconds', @exists_time.process( stats['get']['exists_time_in_millis'] || 0 )
        report_metric 'Index/Exists/Rate', 'Queries/sec',  @exists_rate.process( stats['get']['exists_total'] || 0 )

        report_metric 'Index/Missing/Time', 'Milliseconds', @missing_time.process( stats['get']['missing_time_in_millis'] || 0 )
        report_metric 'Index/Missing/Rate', 'Queries/sec',  @missing_rate.process( stats['get']['missing_total'] || 0 )
      end

      if stats['search']
        report_metric 'Index/Query/Time', 'Milliseconds', @query_time.process( stats['search']['query_time_in_millis'] || 0 )
        report_metric 'Index/Query/Rate', 'Queries/sec',  @query_rate.process( stats['search']['query_total'] || 0 )

        report_metric 'Index/Fetch/Time', 'Milliseconds', @fetch_time.process( stats['search']['fetch_time_in_millis'] || 0 )
        report_metric 'Index/Fetch/Rate', 'Queries/sec',  @fetch_rate.process( stats['search']['fetch_total'] || 0 )
      end

      if stats['refresh']
        report_metric 'Index/Refresh/Time', 'Milliseconds',  @refresh_time.process( stats['refresh']['total'] || 0 )
        report_metric 'Index/Refresh/Rate', 'Queries/sec', @refresh_rate.process( stats['refresh']['total_time_in_millis'] || 0 )
      end

      if stats['flush']
        report_metric 'Index/Flush/Time', 'Milliseconds', @flush_time.process( stats['flush']['total'] || 0 )
        report_metric 'Index/Flush/Rate', 'Queries/sec',  @flush_rate.process( stats['flush']['total_time_in_millis'] || 0 )
      end
    end

    def get_index_stats
      get "#{url}/#{index}/_stats"
    end

    def get url
      begin
        uri     = URI.parse url

        http = ::Net::HTTP.new uri.host, uri.port
        http.open_timeout = 5
        http.read_timeout = 5
        http.use_ssl = true if uri.scheme.casecmp('https') == 0

        request = ::Net::HTTP::Get.new uri.path

        request.basic_auth(username, password) unless username.to_s.empty?

        response = http.request request
      rescue Timeout::Error
        print "ERROR while gathering stats from #{url}: connect/read timeout\n"
        return nil
      rescue Exception => e
        print "ERROR while gathering stats from #{url}: #{e.message}\n"
        return nil
      end

      if !response.is_a?(Net::HTTPSuccess)
        print "ERROR while gathering stats from #{url}: #{resp.message} (#{resp.code})\n"
        return nil
      end

      if response.content_type != 'application/json'
        print "ERROR while parsing stats from #{url}: Excepted JSON"
        return nil
      end

      return response.body
    end
  end

  NewRelic::Plugin::Config.config_file = File.dirname(__FILE__) + '/config/newrelic_plugin.yml'
  NewRelic::Plugin::Setup.install_agent :elasticsearch, self

  NewRelic::Plugin::Run.setup_and_run
end
